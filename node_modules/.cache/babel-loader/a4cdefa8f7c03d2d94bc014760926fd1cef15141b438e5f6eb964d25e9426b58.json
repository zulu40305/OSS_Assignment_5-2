{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathMatch = getPathMatch;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\nfunction getPathMatch(path, options) {\n  const keys = [];\n  const regexp = (0, _pathToRegexp).pathToRegexp(path, keys, {\n    delimiter: '/',\n    sensitive: false,\n    strict: options == null ? void 0 : options.strict\n  });\n  const matcher = (0, _pathToRegexp).regexpToFunction((options == null ? void 0 : options.regexModifier) ? new RegExp(options.regexModifier(regexp.source), regexp.flags) : regexp, keys);\n  /**\n  * A matcher function that will check if a given pathname matches the path\n  * given in the builder function. When the path does not match it will return\n  * `false` but if it does it will return an object with the matched params\n  * merged with the params provided in the second argument.\n  */\n  return (pathname, params) => {\n    const res = pathname == null ? false : matcher(pathname);\n    if (!res) {\n      return false;\n    }\n    /**\n    * If unnamed params are not allowed they must be removed from\n    * the matched parameters. path-to-regexp uses \"string\" for named and\n    * \"number\" for unnamed parameters.\n    */\n    if (options == null ? void 0 : options.removeUnnamedParams) {\n      for (const key of keys) {\n        if (typeof key.name === 'number') {\n          delete res.params[key.name];\n        }\n      }\n    }\n    return _extends({}, params, res.params);\n  };\n}","map":{"version":3,"names":["getPathMatch","_pathToRegexp","require","path","options","keys","regexp","pathToRegexp","delimiter","sensitive","strict","matcher","regexpToFunction","regexModifier","RegExp","source","flags","pathname","params","res","removeUnnamedParams","key","name","_extends"],"sources":["../../../../../shared/lib/router/utils/path-match.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;QA2BgBA,YAAY,GAAZA,YAAY;;AA1BC,IAAAC,aAAmC,GAAAC,OAAA,CAAnC,mCAAmC;AA0BzD,SAASF,YAAYA,CAACG,IAAY,EAAEC,OAAiB,EAAE;EAC5D,MAAMC,IAAI,GAAU,EAAE;EACtB,MAAMC,MAAM,GAAG,IAAAL,aAAY,EAIzBM,YAJyB,CAACJ,IAAI,EAAEE,IAAI,EAAE;IACtCG,SAAS,EAAE,GAAG;IACdC,SAAS,EAAE,KAAK;IAChBC,MAAM,EAAEN,OAAO,QAAQ,GAAf,MAAe,GAAfA,OAAO,CAAEM;GAClB,CAAC;EAEF,MAAMC,OAAO,GAAG,IAAAV,aAAgB,EAK/BW,gBAL+B,CAC9B,CAAAR,OAAO,QAAe,GAAtB,MAAsB,GAAtBA,OAAO,CAAES,aAAa,IAClB,IAAIC,MAAM,CAACV,OAAO,CAACS,aAAa,CAACP,MAAM,CAACS,MAAM,CAAC,EAAET,MAAM,CAACU,KAAK,CAAC,GAC9DV,MAAM,EACVD,IAAI,CACL;EAED;;;;;;EAMA,OAAO,CACLY,QAAwB,EACxBC,MAAY,KACE;IACd,MAAMC,GAAG,GAAGF,QAAQ,IAAI,IAAI,GAAG,KAAK,GAAGN,OAAO,CAACM,QAAQ,CAAC;IACxD,IAAI,CAACE,GAAG,EAAE;MACR,OAAO,KAAK;;IAGd;;;;;IAKA,IAAIf,OAAO,QAAqB,GAA5B,MAA4B,GAA5BA,OAAO,CAAEgB,mBAAmB,EAAE;MAChC,KAAK,MAAMC,GAAG,IAAIhB,IAAI,EAAE;QACtB,IAAI,OAAOgB,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;UAChC,OAAOH,GAAI,CAACD,MAAM,CAASG,GAAG,CAACC,IAAI,CAAC;;;;IAK1C,OAAOC,QAAA,KAAKL,MAAM,EAAKC,GAAG,CAACD,MAAM,CAAE;GACpC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}